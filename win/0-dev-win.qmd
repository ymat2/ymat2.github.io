---
format:
  html:
    title: "Windows 開発環境"
---


## はじめに

Windows で UNIX ライクなコマンドライン操作を行うには、いくつかの選択肢がある。

[WSL (Windows Subsystem for Linux)](/win/wsl.qmd)
: Windows で Linux ディストリビューションを実行する環境を提供する機能。
: WSL2 からは、カーネルも Linux になっている。
: Microsoft としては WSL を推奨している。
: 便利だが、[ディスクスペースを食いつぶす問題](/win/wsl-disk-space.qmd)がある。

[PowerShell](/win/powershell.qmd)
: Microsoft 製 CUI。UNIX とは異なる体系。
: コマンドレットエイリアスのおかげで多少の互換はある。
: いずれにしても最初はアプリケーションのインストールのために PowerShell での作業になる。
  (GUI でもいける。)

Git Bash
: 後述する [Git for Windows](/win/git4win.qmd) をインストールするとついてくる UNIX ライクな環境。
: パッケージ管理とかビルドユーティリティとかはついてない最低限の構成。

[MSYS2 + MinGW](https://www.msys2.org/)
: MSYS2 は Windows における POSIX 準拠を目指した開発環境。
  パッケージ管理ツールとして Arch Linux で使われる [`pacman`](https://gitlab.archlinux.org/pacman/pacman)
  をフォークしている。
: MinGW は Windows 用の C/C++ ビルドツールチェイン。

他の UNIX 系 OS との互換性をできる限り保つなら WSL、
Windows (C ドライブ) 内の作業で完結させつつもビルド環境が必要なら MSYS2 + MinGW、
それ以外の用途なら PowerShell か Git Bash がいいのでは。

::: {.note}

デスクトップを OneDrive 下に置く設定は無効にして `C:/Users/_username_`
で作業する方が安全。

:::


## パッケージ管理

Windows におけるパッケージ管理の主な選択肢として、
Microsoft 公式の [Winget](https://learn.microsoft.com/ja-jp/windows/package-manager/winget/)、
古株で対応するパッケージも多い [Chocolatey](https://chocolatey.org/install)、
ユーザー権限で使いやすい [Scoop](https://scoop.sh/)
の3つがある。

### [Winget](https://learn.microsoft.com/ja-jp/windows/package-manager/winget/)

新しめの Windows ならデフォルトで使えるはず。
後述のツールはどれも winget で入れることができる。

#### Basic usage

`winget install/uninstall`
: パッケージのインストール/アンインストール

`winget search`
: パッケージの検索
: 例: `winget search rstat`

`winget list`
: インストール済みパッケージの表示

### [Chocolatey](https://chocolatey.org/install)

#### Chocolatey のインストール

PowerShell を**管理者として**開く。その後下記のインストールコマンドを実行:

```sh
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
```

#### Basic usage

`choco install/uninstall`
: パッケージのインストール/アンインストール (管理者権限が必要)

`choco search`
: パッケージの検索

`choco list`
: インストール済みパッケージの表示

### [Scoop](https://scoop.sh/)

#### インストール

```sh
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
```


## Git

プロジェクトのバージョン管理のためにも必須。
インストールは winget か、[Git for Windows](/win/git4win.qmd) を参照。


## R

- [R for Windows](https://cran.r-project.org/bin/windows/base/)
- [Rtools](https://cran.r-project.org/bin/windows/Rtools/)

VSCode で使うには PATH を教えてあげる必要がある:

```{.json filename="settings.json"}
{
  "r.rpath.windows": "C:\\Program Files\\R\\R-4.4.0\\bin\\x64\\R.exe",
  "r.rterm.windows": "C:\\Program Files\\R\\R-4.4.0\\bin\\x64\\Rterm.exe",
}
```


## Python

- <https://learn.microsoft.com/ja-jp/windows/python/beginners>
- <https://www.python.org/downloads/windows/>

[Python 環境構築 --- Windows](/python/0_install.qmd#python-のインストール) を参照


## 統合開発環境

好きなやつを入れる:

- [VSCode](https://code.visualstudio.com/Download)
- [Rstudio](https://posit.co/download/rstudio-desktop/)
- [Positron](https://github.com/posit-dev/positron)


## Quarto

<https://quarto.org/docs/get-started/>

Windows 用のやつを入れてあげる。
(R に付属しているやつを使うことはできなさそう?)

PDF のレンダリング用に tex を入れてやる (c.f. `~/AppData/Roaming/TinyTeX/`):

```sh
quarto install tinytex
```

### PDF で日本語フォントを使うには?

Quarto PDF で日本語フォントを使う場合、
デフォルトでは[原ノ味フォント](https://github.com/trueroad/HaranoAjiFonts)が使われるらしい。
Ubuntu とかは最初のインストールでプリセットされていたはずだが、
Windows の Quarto では原ノ味含め、日本語フォントがプリセットされていないっぽい。

そこで、`tlmgr` を使ってフォントをインストールしてやることで使えるようになる:

```sh
> .\AppData\Roaming\TinyTeX\bin\windows\tlmgr.bat install haranoaji
Locale 'Japanese_Japan.932' is unsupported, and may crash the interpreter.
tlmgr.pl: package repository https://ftp.kddilabs.jp/CTAN/systems/texlive/tlnet/ (verified)
[1/1, ??:??/??:??] install: haranoaji [25570k]
Locale 'Japanese_Japan.932' is unsupported, and may crash the interpreter.
running mktexlsr ...
done running mktexlsr.
tlmgr.pl: package log updated: C:/Users/kokep/AppData/Roaming/TinyTeX/texmf-var/web2c/tlmgr.log
tlmgr.pl: command log updated: C:/Users/kokep/AppData/Roaming/TinyTeX/texmf-var/web2c/tlmgr-commands.log
```
